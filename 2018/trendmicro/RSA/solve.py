from fractions import gcd
ns = [23795719145225386804055015945976331504878851440464956768596487167710701468817080174616923533397144140667518414516928416724767417895751634838329442802874972281385084714429143592029962130216053890866347,
        46914096084767238967814493997294740286838053572386502727910903794939283633197997427383196569296188299557978279732421725469482678512672280108542428152186999218210536447287087212703368704976239539968977,
        24543003393712692769038137223030855401835344295968717177380639898023646407807465197761211529143336105057325706788229129519925129413109571220297378014990693203802558792781281981621549760273376606206491]

def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)

def modinv(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception('modular inverse does not exist')
    else:
        return x % m

def text2int(text):
    chars = [ord(c) for c in text]
    result  = 0
    for c in chars:
        result *= 256
        result += c
    return result

def int2text(message):
    result=""
    while message>0:
        result = chr(int(message)%int(256))+ result
        message=int(message)/int(256)
    return result

	
	
def encrypt(text, e, N):
    text_int = text2int(text)
    encrypted = pow(text_int, e, N)
    return encrypted

def decrypt(x_int, d, N):
    decrypted = pow(x_int, d, N)
    text = int2text(decrypted)
    return text

e  =  65537

messages = [
    18700320110367574655449823553009212724937318442101140581378358928204994827498139841897479168675123789374462637095265564472109735802305521045676412446455683615469865332270051569768255072111079626023422,
    27979368157170890767030069060194038526134599497456846620984054211906413024410400026053694007247773572972357106574636186987337336771777265971389911503143036021889778839064900818858188026318442675667707,
    24084879450015204136831744759734371350696278325227327049743434712309456808867398488915798176282769616955247276506807739249439515225213919008982824219656080794207250454008942016125074768497986930713993 

    ]
for i, m in enumerate(messages):
    n1 = ns[i % 3]
    n2 = ns[(i + 1) % 3]

    p = gcd(n1, n2)
    q = n1 / p

    phi = (p - 1) * (q - 1)
    d = modinv(e, phi)

    print(decrypt(m, d, n1))
